import pandas as pd
import matplotlib.pyplot as plt

directory = 'C:\\Users\\agall\\OneDrive\\Desktop\\Results_PV2000\\'
directory_plot = 'C:\\Users\\agall\\OneDrive\\Desktop\\Plots\\'
# Line plot for storage tank and battery over time
# Area plot for  charge/Discharge power for tank and battery

day = range(23+24*5, 2160, 24*7)
# 1) Battery: 2400 - Volume: 10, 8, 6 - Configuration: _10, _17, _15   - Best: 30, 29, 23
data_rl10 = pd.read_csv(directory+'test_08/configuration_010/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rl8 = pd.read_csv(directory+'test_08/configuration_017/episode_29.csv', sep=';', decimal=',', index_col=0)
data_rl6 = pd.read_csv(directory+'test_08/configuration_015/episode_23.csv', sep=';', decimal=',', index_col=0)
data_rb10 = pd.read_csv(directory+'test_08/configuration_010/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb8 = pd.read_csv(directory+'test_08/configuration_017/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb6 = pd.read_csv(directory+'test_08/configuration_015/baseline.csv', sep=';', decimal=',', index_col=0)

price = data_rl10['Price'].to_numpy()
assex = data_rl10.index.to_numpy()

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 6), tight_layout=True)
fig.suptitle('Storage tank SoC at 2400 Wh and best seed')

ax1.plot(assex, data_rl10['Tank SOC'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb10['Tank SOC'], label='Rule-Based Control', color='orangered')
ax1.set_title('10 $m^3$ volume')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl8['Tank SOC'], color='darkblue')
ax2.plot(assex, data_rb8['Tank SOC'], color='orangered')
ax2.set_title('8 m^3 volume')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl6['Tank SOC'], color='darkblue')
ax3.plot(assex, data_rb6['Tank SOC'], color='orangered')
ax3.set_title('6 m^3 volume')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Storage tank SoC at 2400 Wh and best seed.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 2400 Wh and best seed')

ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='royalblue')
ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='red')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='royalblue')
ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='red')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('8 m^3 volume with RL')
ax2.set_ylabel('Power [W]', fontsize='large')
ax2.grid()

ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='royalblue')
ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='red')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r', label='High price ')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y', label='Medium price')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g', label='Low price')
ax3.set_ylim([-10000, 8000])
ax3.set_title('6 m^3 volume with RL')
ax3.legend(bbox_to_anchor=(0.5, -0.15), loc='upper center', ncol=3, borderaxespad=0.)
ax3.grid()

ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='royalblue')
ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='red')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('10 m^3 volume with RB')
# ax4.legend(['Charge', 'Discharge'])
ax4.grid()

ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='royalblue')
ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), alpha=1, color='red')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('8 m^3 volume with RB')
# ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), label='Discharge power', alpha=1, color='royalblue')
ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600), label='Charge power', alpha=1, color='red')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(bbox_to_anchor=(0.5, -0.15), loc='upper center', ncol=2, borderaxespad=0.)
# ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage tank SoC at 2400 Wh and best seed with tariff.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 2400 Wh and best seed')

ax1.fill_between(assex, data_rl10['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax1.fill_between(assex, data_rl10['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax1.set_ylim([-2000, 2000])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax2.fill_between(assex, data_rl8['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax2.set_ylim([-2000, 2000])
ax2.set_title('8 m^3 volume with RL')
ax2.grid()

ax3.fill_between(assex, data_rl6['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax3.fill_between(assex, data_rl6['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax3.set_ylim([-2000, 2000])
ax3.set_title('6 m^3 volume with RL')
ax3.grid()

ax4.fill_between(assex, data_rb10['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax4.fill_between(assex, data_rb10['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax4.set_ylim([-2000, 2000])
ax4.set_title('10 m^3 volume with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb8['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax5.fill_between(assex, data_rb8['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax5.set_ylim([-2000, 2000])
ax5.set_title('8 m^3 volume with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['PV energy to battery [J]'].mul(1/3600), alpha=1, color='royalblue')
ax6.fill_between(assex, data_rb6['battery energy to building [J]'].mul(-1/3600), alpha=1, color='tab:red')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.15, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.15, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.15, color='g')
ax6.set_ylim([-2000, 2000])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 2400 Wh and best seed with tariff.png')
########################################################################################################################
# 2) Battery 4800 - Volume 10, 8, 6 - Configuration: _04, _08, _09 - Best 30, 25, 30
data_rl10 = pd.read_csv(directory+'test_09/configuration_004/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rl8 = pd.read_csv(directory+'test_09/configuration_008/episode_25.csv', sep=';', decimal=',', index_col=0)
data_rl6 = pd.read_csv(directory+'test_09/configuration_009/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rb10 = pd.read_csv(directory+'test_09/configuration_004/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb8 = pd.read_csv(directory+'test_09/configuration_008/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb6 = pd.read_csv(directory+'test_09/configuration_009/baseline.csv', sep=';', decimal=',', index_col=0)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 6), tight_layout=True)
fig.suptitle('Storage tank SoC at 4800 Wh and best seed')

ax1.plot(assex, data_rl10['Tank SOC'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb10['Tank SOC'], label='Rule-Based Control', color='orangered')
ax1.set_title('10 m^3 volume')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl8['Tank SOC'], color='darkblue')
ax2.plot(assex, data_rb8['Tank SOC'], color='orangered')
ax2.set_title('8 m^3 volume')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl6['Tank SOC'], color='darkblue')
ax3.plot(assex, data_rb6['Tank SOC'], color='orangered')
ax3.set_title('6 m^3 volume')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Storage tank SoC at 4800 Wh and best seed.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 4800 Wh and best seed')

ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('8 m^3 volume with RL')
ax2.grid()

ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-10000, 8000])
ax3.set_title('6 m^3 volume with RL')
ax3.grid()

ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('10 m^3 volume with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('8 m^3 volume with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage tank SoC at 4800 Wh and best seed with tariff.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 4800 Wh and best seed')

ax1.fill_between(assex, data_rl10['PV energy to battery [J]'].mul(1/3600))
ax1.fill_between(assex, data_rl10['battery energy to building [J]'].mul(-1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-2500, 2500])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['PV energy to battery [J]'].mul(1/3600))
ax2.fill_between(assex, data_rl8['battery energy to building [J]'].mul(-1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-2500, 2500])
ax2.set_title('8 m^3 volume with RL')
ax2.grid()

ax3.fill_between(assex, data_rl6['PV energy to battery [J]'].mul(1/3600))
ax3.fill_between(assex, data_rl6['battery energy to building [J]'].mul(-1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-2500, 2500])
ax3.set_title('6 m^3 volume with RL')
ax3.grid()

ax4.fill_between(assex, data_rb10['PV energy to battery [J]'].mul(1/3600))
ax4.fill_between(assex, data_rb10['battery energy to building [J]'].mul(-1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-2500, 2500])
ax4.set_title('10 m^3 volume with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb8['PV energy to battery [J]'].mul(1/3600))
ax5.fill_between(assex, data_rb8['battery energy to building [J]'].mul(-1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-2500, 2500])
ax5.set_title('8 m^3 volume with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['PV energy to battery [J]'].mul(1/3600))
ax6.fill_between(assex, data_rb6['battery energy to building [J]'].mul(-1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-2500, 2500])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 4800 Wh and best seed with tariff.png')
########################################################################################################################
# 3) Battery 7200 - Volume 10, 8, 6 - Configuration _16, _11, _18 - Best 27, 26, 26
data_rl10 = pd.read_csv(directory+'test_09/configuration_016/episode_27.csv', sep=';', decimal=',', index_col=0)
data_rl8 = pd.read_csv(directory+'test_09/configuration_011/episode_26.csv', sep=';', decimal=',', index_col=0)
data_rl6 = pd.read_csv(directory+'test_09/configuration_018/episode_26.csv', sep=';', decimal=',', index_col=0)
data_rb10 = pd.read_csv(directory+'test_09/configuration_016/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb8 = pd.read_csv(directory+'test_09/configuration_011/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb6 = pd.read_csv(directory+'test_09/configuration_018/baseline.csv', sep=';', decimal=',', index_col=0)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 6), tight_layout=True)
fig.suptitle('Storage tank SoC at 7200 Wh and best seed')

ax1.plot(assex, data_rl10['Tank SOC'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb10['Tank SOC'], label='Rule-Based Control', color='orangered')
ax1.set_title('10 m^3 volume')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl8['Tank SOC'], color='darkblue')
ax2.plot(assex, data_rb8['Tank SOC'], color='orangered')
ax2.set_title('8 m^3 volume')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl6['Tank SOC'], color='darkblue')
ax3.plot(assex, data_rb6['Tank SOC'], color='orangered')
ax3.set_title('6 m^3 volume')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Storage tank SoC at 7200 Wh and best seed.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 7200 Wh and best seed')

ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, data_rl10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, data_rl8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('8 m^3 volume with RL')
ax2.grid()

ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, data_rl6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-10000, 8000])
ax3.set_title('6 m^3 volume with RL')
ax3.grid()

ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, data_rb10['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('10 m^3 volume with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, data_rb8['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('8 m^3 volume with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, data_rb6['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage tank SoC at 7200 Wh and best seed with tariff.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 7200 Wh and best seed')

ax1.fill_between(assex, data_rl10['PV energy to battery [J]'].mul(1/3600))
ax1.fill_between(assex, data_rl10['battery energy to building [J]'].mul(-1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-2500, 2500])
ax1.set_title('10 m^3 volume with RL')
ax1.grid()

ax2.fill_between(assex, data_rl8['PV energy to battery [J]'].mul(1/3600))
ax2.fill_between(assex, data_rl8['battery energy to building [J]'].mul(-1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-2500, 2500])
ax2.set_title('8 m^3 volume with RL')
ax2.grid()

ax3.fill_between(assex, data_rl6['PV energy to battery [J]'].mul(1/3600))
ax3.fill_between(assex, data_rl6['battery energy to building [J]'].mul(-1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-2500, 2500])
ax3.set_title('6 m^3 volume with RL')
ax3.grid()

ax4.fill_between(assex, data_rb10['PV energy to battery [J]'].mul(1/3600))
ax4.fill_between(assex, data_rb10['battery energy to building [J]'].mul(-1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-2500, 2500])
ax4.set_title('10 m^3 volume with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb8['PV energy to battery [J]'].mul(1/3600))
ax5.fill_between(assex, data_rb8['battery energy to building [J]'].mul(-1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-2500, 2500])
ax5.set_title('8 m^3 volume with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb6['PV energy to battery [J]'].mul(1/3600))
ax6.fill_between(assex, data_rb6['battery energy to building [J]'].mul(-1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-2500, 2500])
ax6.set_title('6 m^3 volume with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 7200 Wh and best seed with tariff.png')
########################################################################################################################
# 4) Battery 2400, 4800, 7200 - Volume 10 - Configuration _10, _04, _16 - Best 30, 30,27
data_rl2400 = pd.read_csv(directory+'test_08/configuration_010/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rl4800 = pd.read_csv(directory+'test_09/configuration_004/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rl7200 = pd.read_csv(directory+'test_09/configuration_016/episode_27.csv', sep=';', decimal=',', index_col=0)
data_rb2400 = pd.read_csv(directory+'test_08/configuration_010/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb4800 = pd.read_csv(directory+'test_09/configuration_004/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb7200 = pd.read_csv(directory+'test_09/configuration_016/baseline.csv', sep=';', decimal=',', index_col=0)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 6), tight_layout=True)
fig.suptitle('Battery SoC at 10 m^3 and best seed')

ax1.plot(assex, data_rl2400['Battery soc'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb2400['Battery soc'], label='Rule-Based Control', color='orangered')
ax1.set_title('2400 Wh capacity')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl4800['Battery soc'], color='darkblue')
ax2.plot(assex, data_rb4800['Battery soc'], color='orangered')
ax2.set_title('4800 Wh capacity')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl7200['Battery soc'], color='darkblue')
ax3.plot(assex, data_rb7200['Battery soc'], color='orangered')
ax3.set_title('7200 Wh capacity')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Battery SoC at 10 m^3 and best seed.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 10 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('4800 Wh capacity  with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-10000, 8000])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage SoC at 10 m^3 and best seed with tariff.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 10 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['PV energy to battery [J]'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['battery energy to building [J]'].mul(-1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-2500, 2500])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['PV energy to battery [J]'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['battery energy to building [J]'].mul(-1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-2500, 2500])
ax2.set_title('4800 Wh capacity with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['PV energy to battery [J]'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['battery energy to building [J]'].mul(-1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-2500, 2500])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['PV energy to battery [J]'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['battery energy to building [J]'].mul(-1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-2500, 2500])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['PV energy to battery [J]'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['battery energy to building [J]'].mul(-1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-2500, 2500])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['PV energy to battery [J]'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['battery energy to building [J]'].mul(-1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-2500, 2500])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 10 m^3 and best seed with tariff.png')
########################################################################################################################
# 5) Battery 2400, 4800, 7200 - Volume 8 - Configuration _17, _08, _11 - Best 29, 25, 26
data_rl2400 = pd.read_csv(directory+'test_08/configuration_017/episode_29.csv', sep=';', decimal=',', index_col=0)
data_rl4800 = pd.read_csv(directory+'test_09/configuration_008/episode_25.csv', sep=';', decimal=',', index_col=0)
data_rl7200 = pd.read_csv(directory+'test_09/configuration_011/episode_26.csv', sep=';', decimal=',', index_col=0)
data_rb2400 = pd.read_csv(directory+'test_08/configuration_017/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb4800 = pd.read_csv(directory+'test_09/configuration_008/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb7200 = pd.read_csv(directory+'test_09/configuration_011/baseline.csv', sep=';', decimal=',', index_col=0)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 6), tight_layout=True)
fig.suptitle('Battery SoC at 8 m^3 and best seed')

ax1.plot(assex, data_rl2400['Battery soc'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb2400['Battery soc'], label='Rule-Based Control', color='orangered')
ax1.set_title('2400 Wh capacity')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl4800['Battery soc'], color='darkblue')
ax2.plot(assex, data_rb4800['Battery soc'], color='orangered')
ax2.set_title('4800 Wh capacity')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl7200['Battery soc'], color='darkblue')
ax3.plot(assex, data_rb7200['Battery soc'], color='orangered')
ax3.set_title('7200 Wh capacity')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Battery SoC at 8 m^3 and best seed.png')
########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 8 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('4800 Wh capacity  with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-10000, 8000])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage tank SoC at 8 m^3 and best seed with tariff.png')

########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 8 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['PV energy to battery [J]'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['battery energy to building [J]'].mul(-1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-2500, 2500])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['PV energy to battery [J]'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['battery energy to building [J]'].mul(-1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-2500, 2500])
ax2.set_title('4800 Wh capacity with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['PV energy to battery [J]'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['battery energy to building [J]'].mul(-1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-2500, 2500])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['PV energy to battery [J]'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['battery energy to building [J]'].mul(-1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-2500, 2500])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['PV energy to battery [J]'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['battery energy to building [J]'].mul(-1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-2500, 2500])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['PV energy to battery [J]'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['battery energy to building [J]'].mul(-1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-2500, 2500])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 8 m^3 and best seed with tariff.png')

########################################################################################################################
# 6) Battery 2400, 4800, 7200 - Volume 6 - Configuration _15, _09, _18 - Best 23, 30, 26
data_rl2400 = pd.read_csv(directory+'test_08/configuration_015/episode_23.csv', sep=';', decimal=',', index_col=0)
data_rl4800 = pd.read_csv(directory+'test_09/configuration_009/episode_30.csv', sep=';', decimal=',', index_col=0)
data_rl7200 = pd.read_csv(directory+'test_09/configuration_018/episode_26.csv', sep=';', decimal=',', index_col=0)
data_rb2400 = pd.read_csv(directory+'test_08/configuration_015/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb4800 = pd.read_csv(directory+'test_09/configuration_009/baseline.csv', sep=';', decimal=',', index_col=0)
data_rb7200 = pd.read_csv(directory+'test_09/configuration_018/baseline.csv', sep=';', decimal=',', index_col=0)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 8), tight_layout=True)
fig.suptitle('Battery SoC at 6 m^3 and best seed')

ax1.plot(assex, data_rl2400['Battery soc'], label='Reinforcement Learning Control', color='darkblue')
ax1.plot(assex, data_rb2400['Battery soc'], label='Rule-Based Control', color='orangered')
ax1.set_title('2400 Wh capacity')
ax1.legend(bbox_to_anchor=(0.87, 0.575, 0.5, .5), loc='center', ncol=1)
ax1.set_ylim([-0.1, 1.2])
ax1.grid()

ax2.plot(assex, data_rl4800['Battery soc'], color='darkblue')
ax2.plot(assex, data_rb4800['Battery soc'], color='orangered')
ax2.set_title('4800 Wh capacity')
ax2.set_ylim([-0.1, 1.2])
ax2.grid()

ax3.plot(assex, data_rl7200['Battery soc'], color='darkblue')
ax3.plot(assex, data_rb7200['Battery soc'], color='orangered')
ax3.set_title('7200 Wh capacity')
ax3.set_ylim([-0.1, 1.2])
ax3.set_xticks(assex[day])
ax3.set_xticklabels(assex[day], rotation=90)
ax3.grid()

plt.savefig(directory_plot + 'Battery SoC at 6 m^3 and best seed.png')

########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Storage tank SoC at 6 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-10000, 8000])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-10000, 8000])
ax2.set_title('4800 Wh capacity  with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-10000, 8000])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-10000, 8000])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-10000, 8000])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Use Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['STORAGETANK:Chilled Water Thermal Storage Source Side Heat Transfer Energy [J](TimeStep)'].mul(1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-10000, 8000])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Storage tank SoC at 6 m^3 and best seed with tariff.png')

########################################################################################################################
fig, ((ax1, ax4), (ax2, ax5), (ax3, ax6)) = plt.subplots(nrows=3, ncols=2, sharex=True, sharey=True, figsize=(15, 6))
fig.suptitle('Battery SoC at 6 m^3 and best seed')

ax1.fill_between(assex, data_rl2400['PV energy to battery [J]'].mul(1/3600))
ax1.fill_between(assex, data_rl2400['battery energy to building [J]'].mul(-1/3600))
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax1.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax1.set_ylim([-2500, 2500])
ax1.set_title('2400 Wh capacity with RL')
ax1.grid()

ax2.fill_between(assex, data_rl4800['PV energy to battery [J]'].mul(1/3600))
ax2.fill_between(assex, data_rl4800['battery energy to building [J]'].mul(-1/3600))
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax2.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax2.set_ylim([-2500, 2500])
ax2.set_title('4800 Wh capacity with RL')
ax2.grid()

ax3.fill_between(assex, data_rl7200['PV energy to battery [J]'].mul(1/3600))
ax3.fill_between(assex, data_rl7200['battery energy to building [J]'].mul(-1/3600))
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax3.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax3.set_ylim([-2500, 2500])
ax3.set_title('7200 Wh capacity with RL')
ax3.grid()

ax4.fill_between(assex, data_rb2400['PV energy to battery [J]'].mul(1/3600))
ax4.fill_between(assex, data_rb2400['battery energy to building [J]'].mul(-1/3600))
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax4.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax4.set_ylim([-2500, 2500])
ax4.set_title('2400 Wh capacity with RB')
ax4.legend(['Charge', 'Discharge'])
ax3.grid()

ax5.fill_between(assex, data_rb4800['PV energy to battery [J]'].mul(1/3600))
ax5.fill_between(assex, data_rb4800['battery energy to building [J]'].mul(-1/3600))
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax5.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax5.set_ylim([-2500, 2500])
ax5.set_title('4800 Wh capacity with RB')
ax5.legend(['Charge', 'Discharge'])
ax5.grid()

ax6.fill_between(assex, data_rb7200['PV energy to battery [J]'].mul(1/3600))
ax6.fill_between(assex, data_rb7200['battery energy to building [J]'].mul(-1/3600))
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.3), alpha=0.25, color='r')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.165), alpha=0.25, color='y')
ax6.fill_between(assex, price*9999999, -price*9999999, where=(price == 0.03), alpha=0.25, color='g')
ax6.set_ylim([-2500, 2500])
ax6.set_title('7200 Wh capacity with RB')
ax6.legend(['Charge', 'Discharge'])
ax6.grid()

plt.xticks([])
plt.xlim([' 07/18  01:00:00', ' 08/01  01:00:00'])
plt.savefig(directory_plot + 'Battery SoC at 6 m^3 and best seed with tariff.png')
########################################################################################################################
plt.show()
